{"version":3,"sources":["assets/defaultPuzzleImage.jpg","assets/solved.gif","config/constants.js","Actions/puzzleActions.js","helpers/arrayShufller.js","Components/ControlPanel.js","Components/Tile.js","Components/TilesWrapper.js","helpers/arrayElemsSwapper.js","Components/Pop-up.js","Components/Puzzle.js","serviceWorker.js","reducers/puzzleReducer.js","config/store.js","index.js"],"names":["module","exports","appConsts","ACTIONS","MOVE_TILE","RANDOMIZE","MAKE_IT_EASY","SOLVED","PLAY_AGAIN","PUZZLE_CONFIG","IMAGE_SIZE","TILE_SIZE","PUZZLE_SIDE_SIZE","EASY_PUZZLE","SOLVED_PUZZLE","shuffleArray","array","newArr","filter","e","i","length","j","Math","floor","random","splice","connect","state","puzzle","dispatch","randomizeTiles","arr","type","payload","randomize","makeEasy","props","movesCount","puzzleMap","className","style","margin","textAlign","role","onClick","Tile","tileIndex","tile","tileMovementHandler","imageSize","puzzleSideSize","tileSize","side","blankElement","x","y","width","height","backgroundImage","image","backgroundPosition","opacity","cursor","moveTile","movement","console","log","indexOfTile","indexOfHole","indexOf","b","swap","map","key","PopUp","movesCounter","playAgainClickHandler","src","solvedImage","alt","puzzleSolved","bool","solved","createNewMap","playAgain","JSON","stringify","display","Boolean","window","location","hostname","match","initialState","puzzleReducer","action","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f470482.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultPuzzleImage.8f3f5394.jpg\";","module.exports = __webpack_public_path__ + \"static/media/solved.6b7a0ff1.gif\";","class appConsts {\n  static ACTIONS = {\n    MOVE_TILE: \"MOVE_TILE\",\n    RANDOMIZE: \"RANDOMIZE\",\n    MAKE_IT_EASY: \"MAKE_IT_EASY\",\n    SOLVED: \"SOLVED\",\n    PLAY_AGAIN: \"PLAY_AGAIN\"\n  };\n  static PUZZLE_CONFIG = {\n    IMAGE_SIZE: 800,\n    TILE_SIZE: 200,\n    PUZZLE_SIDE_SIZE: 4,\n    EASY_PUZZLE: [\n      1,\n      0,\n      2,\n      3,\n      \"BORDER\",\n      4,\n      5,\n      6,\n      7,\n      \"BORDER\",\n      8,\n      9,\n      10,\n      11,\n      \"BORDER\",\n      12,\n      13,\n      14,\n      15\n    ],\n    SOLVED_PUZZLE: [\n      0,\n      1,\n      2,\n      3,\n      \"BORDER\",\n      4,\n      5,\n      6,\n      7,\n      \"BORDER\",\n      8,\n      9,\n      10,\n      11,\n      \"BORDER\",\n      12,\n      13,\n      14,\n      15\n    ]\n  };\n}\n\nexport default appConsts;\n","import appConsts from \"../config/constants\";\r\n\r\nconst { ACTIONS } = appConsts;\r\n\r\nconst movement = arr => ({\r\n  type: ACTIONS.MOVE_TILE,\r\n  payload: arr\r\n});\r\nconst randomize = arr => ({\r\n  type: ACTIONS.RANDOMIZE,\r\n  payload: arr\r\n});\r\n\r\nconst makeItEasy = () => ({\r\n  type: ACTIONS.MAKE_IT_EASY\r\n});\r\n\r\nconst solved = bool => ({\r\n  type: ACTIONS.SOLVED,\r\n  payload: bool\r\n});\r\nconst playAgain = arr => ({\r\n  type: ACTIONS.PLAY_AGAIN,\r\n  payload: arr\r\n});\r\nexport { movement, randomize, makeItEasy, solved, playAgain };\r\n","export function shuffleArray(array) {\r\n  const newArr = array.filter(e => e !== \"BORDER\");\r\n\r\n  for (let i = newArr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n  }\r\n  newArr.splice(4, 0, \"BORDER\");\r\n  newArr.splice(14, 0, \"BORDER\");\r\n  newArr.splice(9, 0, \"BORDER\");\r\n  return newArr;\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { makeItEasy, randomize } from \"../Actions/puzzleActions\";\r\nimport { shuffleArray } from \"../helpers/arrayShufller\";\r\n\r\nconst ControlPanel = props => {\r\n  const { movesCount, randomizeTiles, puzzleMap, makeEasy } = props;\r\n  const randomizeClickHandler = () => {\r\n    randomizeTiles(shuffleArray(puzzleMap));\r\n  };\r\n\r\n  const makeItEasyClickHandler = () => {\r\n    makeEasy();\r\n  };\r\n\r\n  return (\r\n    <div className=\"tilesWrapper\">\r\n      <div style={{ margin: 20, textAlign: \"center\" }}>\r\n        <div>Moves: {movesCount}</div>\r\n        <div role=\"button\" className=\"button\" onClick={randomizeClickHandler}>\r\n          RANDOMIZE\r\n        </div>\r\n\r\n        <div role=\"button\" className=\"button\" onClick={makeItEasyClickHandler}>\r\n          MAKE IT EASY\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst mapDispatchToProps = dispatch => ({\r\n  randomizeTiles: arr => {\r\n    dispatch(randomize(arr));\r\n  },\r\n  makeEasy: () => {\r\n    dispatch(makeItEasy());\r\n  }\r\n});\r\nconst mapStateToProps = state => state.puzzle;\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ControlPanel);\r\n","import image from \"../assets/defaultPuzzleImage.jpg\";\r\nimport React from \"react\";\r\n\r\nconst Tile = props => {\r\n  const {\r\n    tileIndex,\r\n    tile,\r\n    tileMovementHandler,\r\n    imageSize,\r\n    puzzleSideSize,\r\n    tileSize\r\n  } = props;\r\n  const side = imageSize / puzzleSideSize;\r\n  const blankElement = tile === 0;\r\n  const x = (tile % puzzleSideSize) * side;\r\n  const y = Math.floor(tile / puzzleSideSize) * side;\r\n  const handleClick = () => {\r\n    tileMovementHandler(tileIndex);\r\n  };\r\n  return (\r\n    <div\r\n      role=\"button\"\r\n      onClick={tile ? handleClick : null}\r\n      style={{\r\n        width: `${tileSize}px`,\r\n        height: `${tileSize}px`,\r\n        margin: \"0 2px 2px\",\r\n        backgroundImage: `url(${image})`,\r\n        backgroundPosition: `-${x}px -${y}px`,\r\n        opacity: `${!blankElement ? \"1\" : \"0.2\"}`,\r\n        cursor: `${blankElement ? \"default\" : \"pointer\"}`,\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      <span className=\"emptyCell\"> {blankElement && \"EMPTY\"}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport { movement } from \"../Actions/puzzleActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { swap } from \"../helpers/arrayElemsSwapper\";\r\n\r\nconst TilesWrapper = props => {\r\n  const { puzzleMap, imageSize, tileSize, puzzleSideSize, moveTile } = props;\r\n  const tileMovementHandler = tileIndex => {\r\n    if (\r\n      puzzleMap[tileIndex + 1] === 0 ||\r\n      puzzleMap[tileIndex - 1] === 0 ||\r\n      puzzleMap[tileIndex + 5] === 0 ||\r\n      puzzleMap[tileIndex - 5] === 0\r\n    ) {\r\n      moveTile(swap(puzzleMap, tileIndex));\r\n      return;\r\n    }\r\n\r\n    return console.log(\"movement denied\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tilesWrapper\">\r\n      {puzzleMap.map((tile, tileIndex) => {\r\n        if (tile !== \"BORDER\")\r\n          return (\r\n            <Tile\r\n              tileMovementHandler={tileMovementHandler}\r\n              tile={tile}\r\n              tileIndex={tileIndex}\r\n              imageSize={imageSize}\r\n              tileSize={tileSize}\r\n              puzzleSideSize={puzzleSideSize}\r\n              blankElement={tile === 0}\r\n              key={tileIndex}\r\n            />\r\n          );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  moveTile: arr => {\r\n    dispatch(movement(arr));\r\n  }\r\n});\r\nconst mapStateToProps = state => state.puzzle;\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TilesWrapper);\r\n","export function swap(arr, indexOfTile) {\r\n  let newArr = [...arr];\r\n  let indexOfHole = newArr.indexOf(0);\r\n  let b = newArr[indexOfTile];\r\n  newArr[indexOfTile] = newArr[indexOfHole];\r\n  newArr[indexOfHole] = b;\r\n  return newArr;\r\n}\r\n","import solvedImage from \"../assets/solved.gif\";\r\nimport React from \"react\";\r\n\r\nconst PopUp = props => {\r\n  const { movesCounter, playAgainClickHandler } = props;\r\n  const clickHandler = () => {\r\n    playAgainClickHandler(false);\r\n  };\r\n  return (\r\n    <div className=\"popUp\">\r\n      <div className=\"popUpContent\">\r\n        <img src={solvedImage} alt=\"^.^\" />\r\n        <div>\r\n          You've solved my puzzle with only{\" \"}\r\n          {movesCounter === 1\r\n            ? `${movesCounter} move`\r\n            : `${movesCounter} moves`}\r\n        </div>\r\n        <div className=\"button\" onClick={clickHandler}>\r\n          PLAY AGAIN\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ControlPanel from \"./ControlPanel\";\nimport TilesWrapper from \"./TilesWrapper\";\nimport PopUp from \"./Pop-up\";\nimport { playAgain, solved } from \"../Actions/puzzleActions\";\nimport appConsts from \"../config/constants\";\nimport { shuffleArray } from \"../helpers/arrayShufller\";\nimport \"./Puzzle.css\";\n\nconst { PUZZLE_CONFIG } = appConsts;\n\nfunction Puzzle(props) {\n  const { puzzleMap, puzzleSolved, solved, movesCount, createNewMap } = props;\n\n  if (\n    !solved &&\n    JSON.stringify(puzzleMap) === JSON.stringify(PUZZLE_CONFIG.SOLVED_PUZZLE)\n  ) {\n    puzzleSolved(true);\n  }\n\n  const playAgainClickHandler = () => {\n    createNewMap(shuffleArray(puzzleMap));\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"AppContainer\">\n        <TilesWrapper />\n      </div>\n      <div>\n        <ControlPanel />\n      </div>\n      <div style={{ display: solved ? \"contents\" : \"none\" }}>\n        <PopUp\n          playAgainClickHandler={playAgainClickHandler}\n          movesCounter={movesCount}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  puzzleSolved: bool => {\n    dispatch(solved(bool));\n  },\n  createNewMap: arr => {\n    dispatch(playAgain(arr));\n  }\n});\nconst mapStateToProps = state => state.puzzle;\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Puzzle);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import appConsts from \"../config/constants\";\r\nimport { shuffleArray } from \"../helpers/arrayShufller\";\r\n\r\nconst { ACTIONS, PUZZLE_CONFIG } = appConsts;\r\n\r\nconst initialState = {\r\n  puzzleMap: shuffleArray(PUZZLE_CONFIG.SOLVED_PUZZLE),\r\n  movesCount: 0,\r\n  imageSize: PUZZLE_CONFIG.IMAGE_SIZE,\r\n  tileSize: PUZZLE_CONFIG.TILE_SIZE,\r\n  puzzleSideSize: PUZZLE_CONFIG.PUZZLE_SIDE_SIZE,\r\n  solved: false\r\n};\r\n\r\nconst puzzleReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.MOVE_TILE:\r\n      return {\r\n        ...state,\r\n        puzzleMap: action.payload,\r\n        movesCount: state.movesCount + 1\r\n      };\r\n    case ACTIONS.RANDOMIZE:\r\n      return {\r\n        ...state,\r\n        puzzleMap: action.payload,\r\n        movesCount: 0\r\n      };\r\n    case ACTIONS.MAKE_IT_EASY:\r\n      return {\r\n        ...state,\r\n        puzzleMap: PUZZLE_CONFIG.EASY_PUZZLE,\r\n        movesCount: 0\r\n      };\r\n    case ACTIONS.SOLVED:\r\n      return {\r\n        ...state,\r\n        solved: action.payload\r\n      };\r\n    case ACTIONS.PLAY_AGAIN:\r\n      return {\r\n        ...state,\r\n        puzzleMap: action.payload,\r\n        solved: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default puzzleReducer;\r\n","import { createStore, combineReducers } from \"redux\";\nimport puzzleReducer from \"../reducers/puzzleReducer\";\n\nconst rootReducer = combineReducers({\n  puzzle: puzzleReducer\n});\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Puzzle from \"./Components/Puzzle\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./config/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Puzzle />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}