{"version":3,"sources":["assets/defaultPuzzleImage.jpg","assets/solved.gif","config/constants.js","Actions/puzzleActions.js","Components/ControlPanel.js","helpers/arrayShufller.js","Components/Tile.js","Components/TilesWrapper.js","helpers/arrayElemsSwapper.js","Components/Pop-up.js","Components/Puzzle.js","serviceWorker.js","reducers/puzzleReducer.js","config/store.js","index.js"],"names":["module","exports","appConsts","ACTIONS","MOVE_TILE","RANDOMIZE","MAKE_IT_EASY","SOLVED","PUZZLE_CONFIG","IMAGE_SIZE","TILE_SIZE","PUZZLE_SIDE_SIZE","EASY_PUZZLE","SOLVED_PUZZLE","ControlPanel","props","randomizeClickHandler","randomizeTiles","array","newArr","filter","e","i","length","j","Math","floor","random","splice","shuffleArray","puzzleMap","makeItEasyClickHandler","makeEasy","movesCount","this","style","margin","width","className","textAlign","role","onClick","React","Component","connect","state","puzzle","dispatch","arr","type","payload","randomize","Tile","tileIndex","tile","tileMovementHandler","imageSize","puzzleSideSize","tileSize","side","blankElement","x","y","height","backgroundImage","image","backgroundPosition","opacity","cursor","TilesWrapper","moveTile","index_A","index_B","indexOf","b","swap","console","log","display","flexWrap","maxWidth","map","key","movement","PopUp","movesCounter","playAgainClickHandler","src","solvedImage","alt","puzzleSolved","bool","solved","JSON","stringify","justifyContent","Boolean","window","location","hostname","match","initialState","puzzleReducer","action","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c4f551a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultPuzzleImage.8f3f5394.jpg\";","module.exports = __webpack_public_path__ + \"static/media/solved.6b7a0ff1.gif\";","\n\nclass appConsts {\n\n    static ACTIONS = {\n        MOVE_TILE: 'MOVE_TILE',\n        RANDOMIZE: 'RANDOMIZE',\n        MAKE_IT_EASY: 'MAKE_IT_EASY',\n        SOLVED: 'SOLVED'\n\n    };\n    static PUZZLE_CONFIG = {\n        IMAGE_SIZE: 800,\n        TILE_SIZE: 200,\n        PUZZLE_SIDE_SIZE: 4,\n        EASY_PUZZLE: [1, 0, 2, 3,'BORDER', 4, 5, 6, 7,'BORDER',8, 9, 10, 11,'BORDER', 12, 13, 14, 15],\n        SOLVED_PUZZLE: [0, 1, 2, 3,'BORDER', 4, 5, 6, 7,'BORDER',8, 9, 10, 11,'BORDER', 12, 13, 14, 15]\n\n    }\n}\n\nexport default appConsts;\n","import appConsts from \"../config/constants\";\r\n\r\nconst { ACTIONS } = appConsts;\r\n\r\nconst movement = arr => ({\r\n  type: ACTIONS.MOVE_TILE,\r\n  payload: arr\r\n});\r\nconst randomize = arr => ({\r\n  type: ACTIONS.RANDOMIZE,\r\n  payload: arr\r\n});\r\n\r\nconst makeItEasy = () => ({\r\n  type: ACTIONS.MAKE_IT_EASY\r\n});\r\n\r\nconst solved = bool => ({\r\n  type: ACTIONS.SOLVED,\r\n  payload: bool\r\n});\r\nexport { movement, randomize, makeItEasy, solved };\r\n","import React from \"react\";\r\nimport { swap } from \"../helpers/arrayElemsSwapper\";\r\nimport { connect } from \"react-redux\";\r\nimport { makeItEasy, movement, randomize } from \"../Actions/puzzleActions\";\r\nimport { shuffleArray } from \"../helpers/arrayShufller\";\r\n\r\nclass ControlPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  randomizeClickHandler = () => {\r\n    const { randomizeTiles, puzzleMap } = this.props;\r\n    randomizeTiles(shuffleArray(puzzleMap));\r\n  };\r\n\r\n  makeItEasyClickHandler = () => {\r\n    const { makeEasy } = this.props;\r\n    makeEasy();\r\n  };\r\n\r\n  render() {\r\n    const { movesCount } = this.props;\r\n    return (\r\n      <div style={{ margin: 20, width: 200 }} className=\"tilesWrapper\">\r\n        <div style={{ margin: 20, textAlign: \"center\" }}>\r\n          <div>Moves: {movesCount}</div>\r\n          <div\r\n            role=\"button\"\r\n            className=\"button\"\r\n            onClick={this.randomizeClickHandler}\r\n          >\r\n            RANDOMIZE\r\n          </div>\r\n\r\n          <div\r\n            role=\"button\"\r\n            className=\"button\"\r\n            onClick={this.makeItEasyClickHandler}\r\n          >\r\n            MAKE IT EASY\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  randomizeTiles: arr => {\r\n    dispatch(randomize(arr));\r\n  },\r\n  makeEasy: () => {\r\n    dispatch(makeItEasy());\r\n  }\r\n});\r\nconst mapStateToProps = state => state.puzzle;\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ControlPanel);\r\n","export function shuffleArray(array) {\r\n\r\n    const newArr = array.filter(e => e !== 'BORDER');\r\n\r\n  for (let i = newArr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n  }\r\n    newArr.splice(4, 0, 'BORDER');\r\n    newArr.splice(14, 0, 'BORDER');\r\n    newArr.splice(9, 0, 'BORDER');\r\n  return newArr\r\n}\r\n","import image from \"../assets/defaultPuzzleImage.jpg\";\r\nimport React from \"react\";\r\n\r\nconst Tile = props => {\r\n  const { tileIndex, tile, tileMovementHandler, imageSize, puzzleSideSize,tileSize } = props;\r\n  const side = imageSize / puzzleSideSize;\r\n  const blankElement = tile === 0;\r\n  const x = (tile % puzzleSideSize) * side;\r\n  const y = Math.floor(tile / puzzleSideSize) * side;\r\n  const handleClick = () => {\r\n    tileMovementHandler(tileIndex);\r\n  };\r\n  return (\r\n    <div\r\n      role=\"button\"\r\n      onClick={tile === 0 ? null : handleClick}\r\n      style={{\r\n        width: `${tileSize}px`,\r\n        height: `${tileSize}px`,\r\n        margin: \"0 2px 2px\",\r\n        backgroundImage: `url(${image})`,\r\n        backgroundPosition: `-${x}px -${y}px`,\r\n        opacity: `${!blankElement ? \"1\" : \"0.2\"}`,\r\n        cursor: `${blankElement ? \"default\" : \"pointer\"}`,\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      <span className=\"emptyCell\"> {blankElement ? \"EMPTY\" : null}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport { movement } from \"../Actions/puzzleActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { swap } from \"../helpers/arrayElemsSwapper\";\r\nimport {shuffleArray} from \"../helpers/arrayShufller\";\r\n\r\nclass TilesWrapper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  tileMovementHandler = tileIndex => {\r\n    const { puzzleMap, moveTile } = this.props;\r\n\r\n    if (\r\n      puzzleMap[tileIndex + 1] === 0 ||\r\n      puzzleMap[tileIndex - 1] === 0 ||\r\n      puzzleMap[tileIndex + 5] === 0 ||\r\n      puzzleMap[tileIndex - 5] === 0\r\n    ) {\r\n      return moveTile(swap(puzzleMap, tileIndex));\r\n    }\r\n\r\n    return console.log(\"movement denied\");\r\n  };\r\n  render() {\r\n    const { puzzleMap, imageSize, tileSize, puzzleSideSize } = this.props;\r\n\r\n    return (\r\n      <div\r\n        style={{ display: \"flex\", flexWrap: \"wrap\", maxWidth: 816, margin: 20 }}\r\n        className=\"tilesWrapper\"\r\n      >\r\n        {puzzleMap.map((tile, tileIndex) => {\r\n          if (tile !== \"BORDER\")\r\n            return (\r\n              <Tile\r\n                tileMovementHandler={this.tileMovementHandler}\r\n                tile={tile}\r\n                tileIndex={tileIndex}\r\n                imageSize={imageSize}\r\n                tileSize={tileSize}\r\n                puzzleSideSize={puzzleSideSize}\r\n                blankElement={tile === 0}\r\n                key={tileIndex}\r\n              />\r\n            );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  moveTile: arr => {\r\n    dispatch(movement(arr));\r\n  }\r\n});\r\nconst mapStateToProps = state => state.puzzle;\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TilesWrapper);\r\n","export function swap(arr, index_A) {\r\n  let index_B = arr.indexOf(0);\r\n  let b = arr[index_A];\r\n  arr[index_A] = arr[index_B];\r\n  arr[index_B] = b;\r\n  return arr;\r\n}\r\n","import solvedImage from \"../assets/solved.gif\";\r\nimport React from \"react\";\r\n\r\nconst PopUp = props => {\r\n  const { movesCounter, playAgainClickHandler } = props;\r\n  const clickHandler = () => {\r\n      playAgainClickHandler(false)\r\n  }\r\n  return (\r\n    <div className=\"popUp\">\r\n      <div className=\"popUpContent\">\r\n        <img src={solvedImage} alt=\"^.^\" />\r\n        <div>You've solved my puzzle with only {movesCounter === 1 ? `${movesCounter} move` : `${movesCounter} moves`} </div>\r\n        <div className=\"button\" onClick={clickHandler}>PLAY AGAIN</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","import React from \"react\";\n\nimport \"./Puzzle.css\";\nimport ControlPanel from \"./ControlPanel\";\nimport TilesWrapper from \"./TilesWrapper\";\nimport PopUp from \"./Pop-up\";\nimport { movement, solved } from \"../Actions/puzzleActions\";\nimport { connect } from \"react-redux\";\nimport appConsts from \"../config/constants\";\n\nconst { PUZZLE_CONFIG } = appConsts;\n\nfunction Puzzle(props) {\n  const { puzzleMap, puzzleSolved, solved, movesCount } = props;\n\n  if (\n    JSON.stringify(puzzleMap) === JSON.stringify(PUZZLE_CONFIG.SOLVED_PUZZLE)\n  ) {\n    puzzleSolved(true);\n  }\nconst playAgainClickHandler = () => {\n    puzzleSolved(false);\n}\n  console.log(movesCount)\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          width: 900,\n          justifyContent: \"center\"\n        }}\n      >\n        <TilesWrapper />\n      </div>\n      <div>\n        <ControlPanel />\n      </div>\n        <div style={{display: solved ? \"contents\" : 'none' }}>\n      <PopUp playAgainClickHandler={playAgainClickHandler} movesCounter={movesCount}  />\n        </div>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  puzzleSolved: bool => {\n    dispatch(solved(bool));\n  }\n});\nconst mapStateToProps = state => state.puzzle;\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Puzzle);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import appConsts from \"../config/constants\";\r\n\r\nconst { ACTIONS, PUZZLE_CONFIG } = appConsts;\r\n\r\nconst initialState = {\r\n  puzzleMap: [0, 10, 2, 3,'BORDER', 4, 5, 6, 7,'BORDER',8, 9, 1, 11,'BORDER', 12, 13, 14, 15],\r\n  movesCount: 0,\r\n  imageSize: PUZZLE_CONFIG.IMAGE_SIZE,\r\n  tileSize: PUZZLE_CONFIG.TILE_SIZE,\r\n  puzzleSideSize: PUZZLE_CONFIG.PUZZLE_SIDE_SIZE,\r\n  solved: false,\r\n};\r\n\r\nconst puzzleReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.MOVE_TILE:\r\n      return {\r\n        ...state,\r\n        puzzleMap: action.payload,\r\n        movesCount: state.movesCount+1,\r\n      };\r\n    case ACTIONS.RANDOMIZE:\r\n      return {\r\n        ...state,\r\n        puzzleMap: action.payload,\r\n        movesCount: 0,\r\n      };\r\n    case ACTIONS.MAKE_IT_EASY:\r\n      return {\r\n        ...state,\r\n        puzzleMap: PUZZLE_CONFIG.EASY_PUZZLE,\r\n        movesCount: 0,\r\n      };\r\n    case ACTIONS.SOLVED:\r\n      return {\r\n        ...state,\r\n        // puzzleMap: initialState.puzzleMap,\r\n        solved: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default puzzleReducer;\r\n","import { createStore, combineReducers } from \"redux\";\nimport puzzleReducer from \"../reducers/puzzleReducer\";\n\nconst rootReducer = combineReducers({\n  puzzle: puzzleReducer\n});\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Puzzle from './Components/Puzzle';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./config/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(<Provider store={store}>\n    <Puzzle />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}